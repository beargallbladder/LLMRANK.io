"""
LLMPageRank Vulnerability Dashboard

This module provides a streamlit dashboard for visualizing memory vulnerability
scores across competitive categories and brands.
"""

import os
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import datetime
import json
from typing import Dict, List, Optional, Any

# Import memory vulnerability score functionality
import memory_vulnerability_score as mvs

# Set page configuration
st.set_page_config(
    page_title="LLMPageRank Memory Vulnerability Dashboard",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: 600;
        color: #1E3A8A;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.8rem;
        font-weight: 500;
        color: #1E3A8A;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .card {
        background-color: #FFFFFF;
        border-radius: 0.5rem;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }
    .stat-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: #F3F4F6;
    }
    .stat-value {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1E3A8A;
    }
    .stat-label {
        font-size: 1rem;
        font-weight: 500;
        color: #4B5563;
    }
    .high-risk {
        color: #DC2626;
    }
    .medium-risk {
        color: #FBBF24;
    }
    .low-risk {
        color: #10B981;
    }
    .stButton>button {
        background-color: #1E3A8A;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        font-weight: 500;
    }
    .stButton>button:hover {
        background-color: #1E40AF;
    }
    .stSelectbox>div>div {
        background-color: #F3F4F6;
        border: 1px solid #E5E7EB;
        border-radius: 0.25rem;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data(ttl=600)
def load_categories():
    """Load competitive categories from the system."""
    calculator = mvs.get_mvs_calculator()
    return calculator.categories

@st.cache_data(ttl=600)
def get_vulnerable_categories(limit=10):
    """Get the most vulnerable categories."""
    return mvs.get_most_vulnerable_categories(limit)

@st.cache_data(ttl=600)
def get_vulnerable_brands(limit=10, category=None):
    """Get the most vulnerable brands, optionally filtered by category."""
    return mvs.get_most_vulnerable_brands(limit, category)

@st.cache_data(ttl=600)
def get_category_brands(category):
    """Get all brands in a specific category."""
    return mvs.get_category_brands(category)

@st.cache_data(ttl=600)
def get_brand_details(brand_name):
    """Get details for a specific brand."""
    return mvs.get_brand_score(brand_name)

def draw_vulnerability_gauge(score, title="Memory Vulnerability Score"):
    """Draw a gauge chart for vulnerability score."""
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=score * 100,
        domain={'x': [0, 1], 'y': [0, 1]},
        title={'text': title},
        gauge={
            'axis': {'range': [0, 100], 'tickwidth': 1, 'tickcolor': "darkblue"},
            'bar': {'color': "darkblue"},
            'bgcolor': "white",
            'borderwidth': 2,
            'bordercolor': "gray",
            'steps': [
                {'range': [0, 30], 'color': '#10B981'},  # Low risk - green
                {'range': [30, 70], 'color': '#FBBF24'},  # Medium risk - yellow
                {'range': [70, 100], 'color': '#DC2626'}  # High risk - red
            ],
        }
    ))
    fig.update_layout(
        height=250,
        margin=dict(l=10, r=10, t=50, b=10),
        font=dict(size=12)
    )
    return fig

def format_score(score):
    """Format a vulnerability score with color coding."""
    if score >= 0.7:
        return f'<span class="high-risk">{score:.2f}</span>'
    elif score >= 0.5:
        return f'<span class="medium-risk">{score:.2f}</span>'
    else:
        return f'<span class="low-risk">{score:.2f}</span>'

def category_tab():
    """Render the category vulnerability tab."""
    st.markdown('<div class="sub-header">Category Memory Vulnerability</div>', unsafe_allow_html=True)
    
    # Get vulnerable categories
    vulnerable_categories = get_vulnerable_categories(10)
    
    # Create a dataframe for the table
    df = pd.DataFrame([
        {
            "Category": cat.get("name"),
            "Vulnerability Score": cat.get("memory_vulnerability", 0),
            "Last Evaluated": cat.get("last_evaluated", "N/A"),
            "Top Brands": ", ".join(cat.get("top_brands", [])[:3])
        }
        for cat in vulnerable_categories
    ])
    
    # Show vulnerability stats
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown('<div class="stat-container">', unsafe_allow_html=True)
        st.markdown(f'<div class="stat-value high-risk">{len([c for c in vulnerable_categories if c.get("memory_vulnerability", 0) >= 0.8])}</div>', unsafe_allow_html=True)
        st.markdown('<div class="stat-label">Critical Risk Categories</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="stat-container">', unsafe_allow_html=True)
        st.markdown(f'<div class="stat-value medium-risk">{len([c for c in vulnerable_categories if 0.6 <= c.get("memory_vulnerability", 0) < 0.8])}</div>', unsafe_allow_html=True)
        st.markdown('<div class="stat-label">High Risk Categories</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="stat-container">', unsafe_allow_html=True)
        average_vulnerability = sum(c.get("memory_vulnerability", 0) for c in vulnerable_categories) / len(vulnerable_categories) if vulnerable_categories else 0
        st.markdown(f'<div class="stat-value">{average_vulnerability:.2f}</div>', unsafe_allow_html=True)
        st.markdown('<div class="stat-label">Average Vulnerability Score</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Show category vulnerability chart
    st.subheader("Category Vulnerability Comparison")
    
    fig = px.bar(
        df,
        x="Category",
        y="Vulnerability Score",
        color="Vulnerability Score",
        color_continuous_scale=["green", "yellow", "red"],
        range_color=[0, 1],
        height=400
    )
    
    fig.update_layout(
        xaxis_title="Category",
        yaxis_title="Memory Vulnerability Score",
        yaxis_range=[0, 1],
        plot_bgcolor="white",
        margin=dict(l=0, r=0, t=30, b=0)
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Show category table
    st.subheader("Category Details")
    
    # Format the vulnerability score column
    df["Formatted Score"] = df["Vulnerability Score"].apply(lambda x: format_score(x))
    
    # Display formatted table
    st.markdown(
        df.style.format({"Vulnerability Score": "{:.2f}"})
        .hide(axis="index")
        .set_properties(**{"text-align": "left"})
        .to_html(),
        unsafe_allow_html=True
    )
    
    # Category details
    st.subheader("Category Deep Dive")
    
    selected_category = st.selectbox(
        "Select a category to analyze",
        options=[cat.get("name") for cat in vulnerable_categories]
    )
    
    if selected_category:
        # Get category details
        category = next((c for c in vulnerable_categories if c.get("name") == selected_category), None)
        
        if category:
            col1, col2 = st.columns([1, 2])
            
            with col1:
                # Show vulnerability gauge
                vulnerability_score = category.get("memory_vulnerability", 0)
                fig = draw_vulnerability_gauge(vulnerability_score, "Category Vulnerability")
                st.plotly_chart(fig, use_container_width=True)
                
                st.markdown('<div class="card">', unsafe_allow_html=True)
                st.markdown(f"<strong>Last Evaluated:</strong> {category.get('last_evaluated', 'N/A')}", unsafe_allow_html=True)
                st.markdown(f"<strong>Top Brands:</strong> {', '.join(category.get('top_brands', []))}", unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                # Get brands in this category
                brands = get_category_brands(selected_category)
                brand_scores = []
                
                for brand in brands:
                    # Get or calculate brand score
                    score = mvs.calculate_memory_vulnerability(brand, selected_category)
                    brand_scores.append({"Brand": brand, "Score": score})
                
                brand_df = pd.DataFrame(brand_scores)
                
                # Plot brand scores in this category
                if not brand_df.empty:
                    brand_fig = px.bar(
                        brand_df.sort_values("Score", ascending=False),
                        x="Brand",
                        y="Score",
                        color="Score",
                        color_continuous_scale=["green", "yellow", "red"],
                        range_color=[0, 1],
                        height=300
                    )
                    
                    brand_fig.update_layout(
                        title="Brand Vulnerability in " + selected_category,
                        xaxis_title="Brand",
                        yaxis_title="Memory Vulnerability Score",
                        yaxis_range=[0, 1],
                        plot_bgcolor="white",
                        margin=dict(l=0, r=0, t=50, b=0)
                    )
                    
                    st.plotly_chart(brand_fig, use_container_width=True)
                else:
                    st.info("No brand data available for this category.")

def brand_tab():
    """Render the brand vulnerability tab."""
    st.markdown('<div class="sub-header">Brand Memory Vulnerability</div>', unsafe_allow_html=True)
    
    # Get vulnerable brands
    vulnerable_brands = get_vulnerable_brands(20)
    
    # Create a dataframe for the table
    if vulnerable_brands:
        df = pd.DataFrame([
            {
                "Brand": brand.get("name"),
                "Overall Score": brand.get("overall_score", 0),
                "Categories": len(brand.get("category_scores", {})),
                "Last Evaluated": brand.get("last_evaluated", "N/A")
            }
            for brand in vulnerable_brands
        ])
        
        # Show vulnerability stats
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown('<div class="stat-container">', unsafe_allow_html=True)
            st.markdown(f'<div class="stat-value high-risk">{len([b for b in vulnerable_brands if b.get("overall_score", 0) >= 0.7])}</div>', unsafe_allow_html=True)
            st.markdown('<div class="stat-label">High Risk Brands</div>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            st.markdown('<div class="stat-container">', unsafe_allow_html=True)
            st.markdown(f'<div class="stat-value medium-risk">{len([b for b in vulnerable_brands if 0.5 <= b.get("overall_score", 0) < 0.7])}</div>', unsafe_allow_html=True)
            st.markdown('<div class="stat-label">Medium Risk Brands</div>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col3:
            st.markdown('<div class="stat-container">', unsafe_allow_html=True)
            average_vulnerability = sum(b.get("overall_score", 0) for b in vulnerable_brands) / len(vulnerable_brands) if vulnerable_brands else 0
            st.markdown(f'<div class="stat-value">{average_vulnerability:.2f}</div>', unsafe_allow_html=True)
            st.markdown('<div class="stat-label">Average Vulnerability Score</div>', unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Show brand vulnerability chart
        st.subheader("Brand Vulnerability Comparison")
        
        top_10_df = df.sort_values("Overall Score", ascending=False).head(10)
        
        fig = px.bar(
            top_10_df,
            x="Brand",
            y="Overall Score",
            color="Overall Score",
            color_continuous_scale=["green", "yellow", "red"],
            range_color=[0, 1],
            height=400
        )
        
        fig.update_layout(
            xaxis_title="Brand",
            yaxis_title="Memory Vulnerability Score",
            yaxis_range=[0, 1],
            plot_bgcolor="white",
            margin=dict(l=0, r=0, t=30, b=0)
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Brand details
        st.subheader("Brand Deep Dive")
        
        selected_brand = st.selectbox(
            "Select a brand to analyze",
            options=[brand.get("name") for brand in vulnerable_brands]
        )
        
        if selected_brand:
            # Get brand details
            brand = next((b for b in vulnerable_brands if b.get("name") == selected_brand), None)
            
            if brand:
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    # Show vulnerability gauge
                    vulnerability_score = brand.get("overall_score", 0)
                    fig = draw_vulnerability_gauge(vulnerability_score, "Overall Vulnerability")
                    st.plotly_chart(fig, use_container_width=True)
                    
                    st.markdown('<div class="card">', unsafe_allow_html=True)
                    st.markdown(f"<strong>Last Evaluated:</strong> {brand.get('last_evaluated', 'N/A')}", unsafe_allow_html=True)
                    st.markdown(f"<strong>Categories:</strong> {', '.join(brand.get('category_scores', {}).keys())}", unsafe_allow_html=True)
                    st.markdown('</div>', unsafe_allow_html=True)
                
                with col2:
                    # Show category scores for this brand
                    category_scores = brand.get("category_scores", {})
                    
                    if category_scores:
                        category_df = pd.DataFrame([
                            {"Category": cat, "Score": score}
                            for cat, score in category_scores.items()
                        ])
                        
                        category_fig = px.bar(
                            category_df.sort_values("Score", ascending=False),
                            x="Category",
                            y="Score",
                            color="Score",
                            color_continuous_scale=["green", "yellow", "red"],
                            range_color=[0, 1],
                            height=300
                        )
                        
                        category_fig.update_layout(
                            title=f"{selected_brand} Vulnerability by Category",
                            xaxis_title="Category",
                            yaxis_title="Memory Vulnerability Score",
                            yaxis_range=[0, 1],
                            plot_bgcolor="white",
                            margin=dict(l=0, r=0, t=50, b=0)
                        )
                        
                        st.plotly_chart(category_fig, use_container_width=True)
                    else:
                        st.info("No category data available for this brand.")
                
                # Show brand history
                st.subheader("Vulnerability History")
                history = brand.get("history", [])
                
                if history:
                    history_df = pd.DataFrame(history)
                    history_df["timestamp"] = pd.to_datetime(history_df["timestamp"])
                    history_df = history_df.sort_values("timestamp")
                    
                    history_fig = px.line(
                        history_df,
                        x="timestamp",
                        y="score",
                        color="category",
                        markers=True,
                        height=300
                    )
                    
                    history_fig.update_layout(
                        title=f"{selected_brand} Vulnerability History",
                        xaxis_title="Date",
                        yaxis_title="Memory Vulnerability Score",
                        yaxis_range=[0, 1],
                        plot_bgcolor="white",
                        margin=dict(l=0, r=0, t=50, b=0)
                    )
                    
                    st.plotly_chart(history_fig, use_container_width=True)
                else:
                    st.info("No historical data available for this brand.")
    else:
        st.info("No brand data available. Please run analysis on some categories first.")

def analysis_tab():
    """Render the analysis and run tab."""
    st.markdown('<div class="sub-header">Run Memory Vulnerability Analysis</div>', unsafe_allow_html=True)
    
    # Get available categories
    categories = load_categories()
    
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.markdown("""
    <p>This tab allows you to run memory vulnerability analysis on specific categories or brands.
    The analysis will calculate memory vulnerability scores based on category competitiveness,
    mention frequency, narrative consistency, and other factors.</p>
    """, unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Category selection
    selected_category = st.selectbox(
        "Select a category to analyze",
        options=[cat.get("name") for cat in categories]
    )
    
    if selected_category:
        # Get brands in this category
        brands = get_category_brands(selected_category)
        
        st.markdown(f"### Analyzing {selected_category}")
        st.markdown(f"This category contains {len(brands)} brands to analyze.")
        
        # Run button
        if st.button("Run Analysis"):
            with st.spinner(f"Analyzing {len(brands)} brands in {selected_category}..."):
                # Calculate scores for all brands
                results = mvs.calculate_all_brand_scores(selected_category)
                
                # Update category vulnerability
                brand_scores = [r.get("category_scores", {}).get(selected_category, 0) for r in results]
                category_score = sum(brand_scores) / len(brand_scores) if brand_scores else 0
                mvs.update_category_vulnerability(selected_category, category_score)
                
                # Show results
                st.success(f"Analysis complete! Analyzed {len(results)} brands in {selected_category}.")
                
                # Show category score
                st.subheader("Category Vulnerability Score")
                fig = draw_vulnerability_gauge(category_score, f"{selected_category} Vulnerability")
                st.plotly_chart(fig, use_container_width=True)
                
                # Show brand scores
                brand_df = pd.DataFrame([
                    {
                        "Brand": r.get("name", ""),
                        "Score": r.get("category_scores", {}).get(selected_category, 0)
                    }
                    for r in results
                ]).sort_values("Score", ascending=False)
                
                st.subheader("Brand Vulnerability Scores")
                
                brand_fig = px.bar(
                    brand_df,
                    x="Brand",
                    y="Score",
                    color="Score",
                    color_continuous_scale=["green", "yellow", "red"],
                    range_color=[0, 1],
                    height=400
                )
                
                brand_fig.update_layout(
                    xaxis_title="Brand",
                    yaxis_title="Memory Vulnerability Score",
                    yaxis_range=[0, 1],
                    plot_bgcolor="white",
                    margin=dict(l=0, r=0, t=30, b=0)
                )
                
                st.plotly_chart(brand_fig, use_container_width=True)

def main():
    """Main function to run the dashboard."""
    # Header
    st.markdown('<div class="main-header">Memory Vulnerability Dashboard</div>', unsafe_allow_html=True)
    st.markdown("""
    This dashboard visualizes Memory Vulnerability Scores (MVS) for brands and categories,
    identifying those at risk of being forgotten or misrepresented by LLMs.
    """)
    
    # Tabs
    tab1, tab2, tab3 = st.tabs(["Categories", "Brands", "Run Analysis"])
    
    with tab1:
        category_tab()
    
    with tab2:
        brand_tab()
    
    with tab3:
        analysis_tab()
    
    # Footer
    st.markdown("---")
    st.markdown(
        "Memory Vulnerability Dashboard | LLMPageRank | Last updated: " +
        datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    )

if __name__ == "__main__":
    main()