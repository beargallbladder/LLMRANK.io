"""
Cookie Combat Dashboard

This Streamlit dashboard visualizes the cookie economy and competitive brand insights
generated by the LLMPageRank agents. It shows agent performance, competitive landscapes,
and the insights that earned the most cookies.
"""

import os
import json
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

import cookie_economy
import competitive_sectors

# Set page config
st.set_page_config(
    page_title="LLMPageRank Cookie Combat",
    page_icon="üç™",
    layout="wide"
)

# Load test data
def load_test_data():
    """
    Load some test data if none exists. In production, this would come from
    the actual cookie economy and competitive sectors systems.
    """
    # Register test agents
    cookie_economy.register_agent("ModelComparator")
    cookie_economy.register_agent("GapDetector")
    cookie_economy.register_agent("SignalRarityProfiler")
    cookie_economy.register_agent("DomainExplorer")
    cookie_economy.register_agent("TrendAnalyzer")
    
    # Add test sectors
    competitive_sectors.add_sector("Social Media")
    competitive_sectors.add_sector("Cloud Computing")
    competitive_sectors.add_sector("E-commerce")
    
    # Add test brands
    competitive_sectors.add_brand("Facebook", ["Social Media"])
    competitive_sectors.add_brand("Twitter", ["Social Media"])
    competitive_sectors.add_brand("LinkedIn", ["Social Media"])
    competitive_sectors.add_brand("Instagram", ["Social Media"])
    
    competitive_sectors.add_brand("AWS", ["Cloud Computing"])
    competitive_sectors.add_brand("Azure", ["Cloud Computing"])
    competitive_sectors.add_brand("Google Cloud", ["Cloud Computing"])
    
    competitive_sectors.add_brand("Amazon", ["E-commerce"])
    competitive_sectors.add_brand("eBay", ["E-commerce"])
    competitive_sectors.add_brand("Walmart", ["E-commerce"])
    competitive_sectors.add_brand("Shopify", ["E-commerce"])
    
    # Add test relationships
    competitive_sectors.add_brand_relationship(
        "Facebook", "Twitter", "competitor", 0.2,
        evidence="Strong competition in social media space",
        domains=["techcrunch.com", "wired.com"]
    )
    
    competitive_sectors.add_brand_relationship(
        "Facebook", "Instagram", "owner", 0.9,
        evidence="Facebook acquired Instagram",
        domains=["techcrunch.com"]
    )
    
    competitive_sectors.add_brand_relationship(
        "AWS", "Azure", "competitor", 0.3,
        evidence="Major competitors in cloud infrastructure",
        domains=["zdnet.com", "infoworld.com"]
    )
    
    competitive_sectors.add_brand_relationship(
        "Amazon", "Walmart", "competitor", 0.1,
        evidence="Fierce retail competition",
        domains=["cnbc.com", "forbes.com"]
    )
    
    # Generate insights
    competitive_sectors.generate_sector_insight("Social Media", "ModelComparator")
    competitive_sectors.generate_sector_insight("Cloud Computing", "GapDetector")
    competitive_sectors.generate_sector_insight("E-commerce", "SignalRarityProfiler")
    
    # Add some random insights directly to cookie economy
    for _ in range(10):
        agent_index = _ % 5
        agent_name = ["ModelComparator", "GapDetector", "SignalRarityProfiler", 
                    "DomainExplorer", "TrendAnalyzer"][agent_index]
        
        quality = 0.4 + ((_ % 7) / 10)  # Random quality between 0.4 and 1.0
        
        insight = {
            "domain": "example.com",
            "category": ["AI Research", "Finance", "Health", "Technology", "Automotive"][_ % 5],
            "brands": ["Brand A", "Brand B", "Brand C"],
            "title": f"Test Insight {_}",
            "description": f"This is a test insight number {_}",
            "quality_score": quality
        }
        
        cookie_economy.submit_insight(agent_name, insight)

def display_cookie_economy():
    """Display the cookie economy dashboard."""
    st.header("üç™ Cookie Economy")
    
    # Get cookie pool status
    pool_status = cookie_economy.get_pool_status()
    
    # Display pool status
    col1, col2, col3 = st.columns(3)
    
    with col1:
        remaining = pool_status.get("cookie_pool_remaining", 0)
        total = pool_status.get("cookie_pool_total", 100)
        st.metric("Cookie Pool", f"{remaining}/{total}", f"{int(remaining/total*100)}%")
    
    with col2:
        cycle_end = datetime.fromisoformat(pool_status.get("cycle_end", datetime.now().isoformat()))
        days_left = (cycle_end - datetime.now()).days
        st.metric("Days Until Reset", days_left)
    
    with col3:
        active_agents = pool_status.get("agents_active", 0)
        st.metric("Active Agents", active_agents)
    
    # Display agent leaderboard
    st.subheader("Agent Leaderboard")
    
    leaderboard = cookie_economy.get_leaderboard()
    
    if leaderboard:
        # Convert to DataFrame
        df = pd.DataFrame(leaderboard)
        
        # Create bar chart
        fig = px.bar(
            df,
            x="agent_name",
            y="cookie_balance",
            color="cookie_balance",
            title="Agent Cookie Balances",
            color_continuous_scale="Viridis"
        )
        
        fig.update_layout(xaxis_title="Agent", yaxis_title="Cookies")
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Display table
        st.dataframe(df, use_container_width=True)
    else:
        st.info("No agents have earned cookies yet.")

def display_competitive_landscape():
    """Display the competitive landscape dashboard."""
    st.header("üè¢ Competitive Landscape")
    
    # Get sectors and brands
    sectors = competitive_sectors.get_sectors()
    brands = competitive_sectors.get_brands()
    
    # Select sector
    sector_names = list(sectors.keys())
    
    if not sector_names:
        st.info("No sectors defined yet.")
        return
    
    selected_sector = st.selectbox("Select Sector", sector_names)
    
    # Display sector information
    sector_data = sectors.get(selected_sector, {})
    
    st.subheader(f"{selected_sector} Sector")
    st.markdown(f"**Brands:** {sector_data.get('brand_count', 0)}")
    st.markdown(f"**Insights Generated:** {sector_data.get('insight_count', 0)}")
    
    # Get brands in this sector
    sector_brands = competitive_sectors.get_sector_brands(selected_sector)
    
    if sector_brands:
        # Display brands
        st.subheader("Brands in this Sector")
        
        # Create columns for brand cards
        cols = st.columns(min(4, len(sector_brands)))
        
        for i, brand_name in enumerate(sector_brands):
            col_index = i % len(cols)
            
            with cols[col_index]:
                brand_data = competitive_sectors.get_brand_data(brand_name)
                
                if brand_data:
                    st.markdown(f"**{brand_name}**")
                    st.markdown(f"Insights: {brand_data.get('insight_count', 0)}")
                    
                    # Count relationships
                    relationships = brand_data.get("relationships", {})
                    competitor_count = sum(1 for rel in relationships.values() 
                                         if rel.get("type") == "competitor")
                    
                    st.markdown(f"Competitors: {competitor_count}")
        
        # Get relationships
        relationships = competitive_sectors.get_sector_relationships(selected_sector)
        
        if relationships:
            st.subheader("Competitive Relationships")
            
            # Create network data
            nodes = []
            edges = []
            
            for brand, brand_rels in relationships.items():
                nodes.append(brand)
                
                for related_brand, rel_data in brand_rels.items():
                    if rel_data.get("type") == "competitor" and brand < related_brand:  # Only add each edge once
                        sentiment = rel_data.get("sentiment", 0.5)
                        strength = 1.0 - sentiment  # Invert for competition strength (lower sentiment = stronger competition)
                        
                        edges.append({
                            "source": brand,
                            "target": related_brand,
                            "strength": strength,
                            "type": rel_data.get("type")
                        })
            
            if edges:
                # Create edge DataFrame
                edge_df = pd.DataFrame(edges)
                
                # Create heatmap of competitive relationships
                matrix_data = []
                
                for brand in sector_brands:
                    row = {"Brand": brand}
                    
                    for other_brand in sector_brands:
                        if brand == other_brand:
                            row[other_brand] = 0
                        elif brand in relationships and other_brand in relationships[brand]:
                            rel = relationships[brand][other_brand]
                            if rel.get("type") == "competitor":
                                row[other_brand] = 1.0 - rel.get("sentiment", 0.5)
                            else:
                                row[other_brand] = 0
                        else:
                            row[other_brand] = 0
                    
                    matrix_data.append(row)
                
                matrix_df = pd.DataFrame(matrix_data)
                matrix_df = matrix_df.set_index("Brand")
                
                # Plot heatmap
                fig = px.imshow(
                    matrix_df.values,
                    x=matrix_df.columns,
                    y=matrix_df.index,
                    color_continuous_scale="Reds",
                    title="Competition Intensity Matrix"
                )
                
                fig.update_layout(
                    xaxis_title="Brand",
                    yaxis_title="Brand"
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("No competitive relationships found in this sector.")
        else:
            st.info("No relationships defined for brands in this sector.")
    else:
        st.info("No brands found in this sector.")

def display_insight_analysis():
    """Display the insight analysis dashboard."""
    st.header("üí° Insight Analysis")
    
    # Get insights
    insights = competitive_sectors.get_insights(limit=100)
    
    if not insights:
        st.info("No insights generated yet.")
        return
    
    # Prepare data
    insight_data = []
    
    for insight in insights:
        insight_data.append({
            "id": insights.index(insight),
            "timestamp": insight.get("timestamp", ""),
            "agent": insight.get("agent_name", "Unknown"),
            "sector": insight.get("sector", "Unknown"),
            "type": insight.get("type", "Unknown"),
            "title": insight.get("title", ""),
            "brands": ", ".join(insight.get("brands", [])),
            "quality_score": insight.get("quality_score", 0),
            "cookies_earned": insight.get("cookies_earned", 0)
        })
    
    df = pd.DataFrame(insight_data)
    
    # Sort by timestamp (newest first)
    if not df.empty and "timestamp" in df.columns:
        df["timestamp"] = pd.to_datetime(df["timestamp"])
        df = df.sort_values("timestamp", ascending=False)
    
    # Display insights over time
    if not df.empty:
        st.subheader("Insights Over Time")
        
        # Count insights by day
        if "timestamp" in df.columns:
            df["date"] = df["timestamp"].dt.date
            insights_by_day = df.groupby("date").size().reset_index(name="count")
            
            fig = px.line(
                insights_by_day,
                x="date",
                y="count",
                title="Insights Generated Over Time"
            )
            
            fig.update_layout(xaxis_title="Date", yaxis_title="Number of Insights")
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Insights by sector
        if "sector" in df.columns:
            st.subheader("Insights by Sector")
            
            sector_counts = df["sector"].value_counts().reset_index()
            sector_counts.columns = ["Sector", "Count"]
            
            fig = px.pie(
                sector_counts,
                values="Count",
                names="Sector",
                title="Insights by Sector"
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Insights by agent
        if "agent" in df.columns and "cookies_earned" in df.columns:
            st.subheader("Agent Performance")
            
            agent_performance = df.groupby("agent").agg({
                "cookies_earned": "sum",
                "quality_score": "mean",
                "id": "count"
            }).reset_index()
            
            agent_performance.columns = ["Agent", "Cookies Earned", "Avg Quality", "Insight Count"]
            
            fig = px.bar(
                agent_performance,
                x="Agent",
                y="Cookies Earned",
                color="Avg Quality",
                hover_data=["Insight Count"],
                title="Cookies Earned by Agent"
            )
            
            fig.update_layout(xaxis_title="Agent", yaxis_title="Cookies Earned")
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Top insights table
        st.subheader("Recent Insights")
        
        if not df.empty:
            st.dataframe(df[["timestamp", "agent", "sector", "title", "quality_score", "cookies_earned"]], 
                     use_container_width=True)
    else:
        st.info("No insight data available.")

def main():
    """Main application."""
    st.title("üç™ LLMPageRank Cookie Combat Dashboard")
    st.markdown("""
    This dashboard shows the performance of AI agents in the LLMPageRank system, competing for cookies by
    generating insights about brand relationships and competitive dynamics across different sectors.
    """)
    
    # Create tabs
    tab1, tab2, tab3 = st.tabs(["Cookie Economy", "Competitive Landscape", "Insight Analysis"])
    
    with tab1:
        display_cookie_economy()
    
    with tab2:
        display_competitive_landscape()
    
    with tab3:
        display_insight_analysis()
    
    # Check if data exists, and if not, prompt to load test data
    has_data = (
        len(cookie_economy.get_leaderboard()) > 0 or
        len(competitive_sectors.get_sectors()) > 0
    )
    
    if not has_data:
        st.sidebar.warning("No data found in the system.")
        if st.sidebar.button("Load Test Data"):
            load_test_data()
            st.sidebar.success("Test data loaded successfully!")
            st.experimental_rerun()

if __name__ == "__main__":
    main()